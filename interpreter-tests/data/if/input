(define (test-if-else x)
  (if (> x 0)
      "Positive"
      "Non-positive"))

(define (test-nested-if-else x)
  (if (== x 0)
      "Zero"
      (if (> x 0)
          "Positive"
          "Negative")))

(define (test-conditional-assignment x)
  (define result
    (if (> x 0)
        "Positive"
        "Non-positive"))
  (display "The result is: ")
  (displayln result))

(define (test-conditional-execution x)
  (if (< x 0)
      (displayln "x is negative.")
      (displayln "x is non-negative.")))

(define (test-multiple-conditions x y)
  (if (and (> x 0) (> y 0))
      "Both x and y are positive"
      (if (or (< x 0) (< y 0))
          "At least one of x and y is negative"
          "Both x and y are non-negative")))

(displayln (test-if-else 5))
(displayln (test-nested-if-else -3))
(test-conditional-assignment 7)
(test-conditional-execution 4)
(displayln (test-multiple-conditions 2 3))
