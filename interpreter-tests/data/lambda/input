(define add (lambda (x y) (+ x y)))
(displayln (add 1 2))

(define map
  (lambda (lst f)
    (if (null? lst)
        '()
        (cons (f (car lst)) (map (cdr lst) f)))))

(define square-sum (lambda (x y) (+ (* x x) (* y y))))
(displayln (square-sum 3 4))

(define is-even (lambda (x) (== (% x 2) 0)))
(displayln (is-even 10))

(define is-empty (lambda (lst) (null? lst)))
(displayln (is-empty '(1 2 3)))

(define max (lambda (x y) (if (> x y) x y)))
(displayln (max 10 20))

(define square-list (lambda (lst) (map lst (lambda (x) (* x x)))))
(displayln (square-list '(1 2 3 4)))