(define (test-cond-simple x)
  (cond
    ((== x 0) "Zero")
    ((== x 1) "One")
    ((== x 2) "Two")
    (else "Other")))

(define (test-cond-multiple x)
  (cond
    ((< x 0) "Negative")
    ((== x 0) "Zero")
    ((and (>= x 1) (<= x 10)) "Between 1 and 10")
    ((> x 10) "Greater than 10")
    (else "Other")))

(define (test-nested-cond x y)
  (cond
    ((== x y) "x is equal to y")
    ((< x y) "x is less than y")
    (else
      (cond
        ((> x y) "x is greater than y")
        (else "Invalid comparison")))))

(define (test-if-else-if-else x)
  (cond
    ((> x 0) "Positive")
    ((== x 0) "Zero")
    (else "Negative")))

(displayln (test-cond-simple 1))
(displayln (test-cond-multiple 15))
(displayln (test-nested-cond 3 5))
(displayln (test-if-else-if-else 0))
(displayln (test-if-else-if-else -1))